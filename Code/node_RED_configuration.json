[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "72a8a256804a1c17",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "130db6cca8ba6951",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 620,
        "wires": [
            [
                "4f453c4c54edc412",
                "5cd872a568e94ffb"
            ]
        ]
    },
    {
        "id": "4f453c4c54edc412",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "STDS/2/Niveau",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STDS/2/Puissance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STDS/2/Température/T1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STDS/2/Tempétature/T2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STDS/2/Diag",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STDS/2/CO2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 530,
        "y": 620,
        "wires": [
            [
                "a947a552c0b63e0e"
            ],
            [
                "6f86e7f9d3b36223"
            ],
            [
                "3714ca65e353d0a1"
            ],
            [
                "1a2644843eb0f90e"
            ],
            [
                "9ae322b9bc7f55ca"
            ],
            [
                "77471fca53e190dc"
            ]
        ]
    },
    {
        "id": "a947a552c0b63e0e",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into Niveau (dateInsertion, data)\nvalues (current_timestamp, {{{msg.payload}}})",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 810,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "6f86e7f9d3b36223",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into Puissance (dateInsertion, data)\nvalues (current_timestamp, {{{msg.payload}}})",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 830,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3714ca65e353d0a1",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into TemperatureT1 (dateInsertion, data)\nvalues (current_timestamp, {{{msg.payload}}})",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 870,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "1a2644843eb0f90e",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into TemperatureT2 (dateInsertion, data)\nvalues (current_timestamp, {{{msg.payload}}})",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "9ae322b9bc7f55ca",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into Diag (dateInsertion, data)\nvalues (current_timestamp, '{{{msg.payload}}}')",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 870,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "77471fca53e190dc",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "query": "insert into CO2 (dateInsertion, data)\nvalues (current_timestamp, {{{msg.payload}}})",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 850,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "5cd872a568e94ffb",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "query": "drop table TemperatureT1;\ndrop table TemperatureT2;\ndrop table Niveau;\ndrop table CO2;\ndrop table Diag;\ndrop table Puissance;\n\ncreate table TemperatureT1\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data float\n);\n\ncreate table TemperatureT2\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data float\n);\n\ncreate table Niveau\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data int\n);\n\ncreate table CO2\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data float\n);\n\ncreate table Diag\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data text\n);\n\ncreate table Puissance\n(\n    id serial primary key,\n    dateInsertion timestamp,\n    data float\n)",
        "postgreSQLConfig": "64e1f68a1b743477",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "130db6cca8ba6951",
        "type": "mqtt-broker",
        "name": "test",
        "broker": "iot.iut-blagnac.fr",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "64e1f68a1b743477",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "timescaledb",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "timescale",
        "userFieldType": "str",
        "password": "password",
        "passwordFieldType": "str"
    }
]